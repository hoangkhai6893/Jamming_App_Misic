{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","state","term","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","alert","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c276cde.chunk.js","sourcesContent":["const clientId =  'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://hoangkhaimusic.surge.sh';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if (accessToken){\n            return accessToken;\n        }\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessTokenMatch && expiresInMatch ){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n            window.history.pushState('Access Token' , null , '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: { Authorization : `Bearer ${accessToken}`}\n        })\n          .then( response =>  response.json())\n          .then( jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', { headers: headers })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({ name: name })\n            });\n          })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            const playListId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: trackUris })\n              }\n            );\n          });\n      }\n    };\n    \nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\nclass SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.state = {\n            term: ''\n        }\n    }\n    search(){\n        this.props.onSearch(this.state.term);\n    }\n    handleTermChange(event){\n        this.setState( {term: event.target.value});\n    }\n\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <input  onChange = {this.handleTermChange} \n                placeholder=\"Enter A Song, Album, or Artist\" />\n                <button className=\"SearchButton\"\n                        onClick={this.search}>\n                    SEARCH\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react'\nimport './Track.css'\n\nclass Track extends React.Component{\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction(){\n       if(this.props.isRemoval){\n           return <button className = \"Track-action\" onClick = { this.removeTrack }>-</button>\n       }else{\n           return <button className = \"Track-action\" onClick = { this.addTrack }>+</button>\n       }\n    }\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n    render(){\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3> {this.props.track.name} </h3>\n                    <p> {this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n            \n        )\n    }\n}\n\nexport default Track;","import React from 'react'\nimport './TrackList.css'\nimport  Track  from '../Track/Track'\n\nclass TrackList extends React.Component{\n    render(){\n        return(\n            <div className=\"TrackList\">\n            {\n                this.props.tracks.map( track => {\n                    return <Track track = {track}\n                                  key = {track.id} \n                                  onAdd = {this.props.onAdd} \n                                  onRemove = {this.props.onRemove}\n                                  isRemoval = {this.props.isRemoval} />\n                })\n            }\n            </div>\n        )\n    }\n}\nexport default TrackList;","import React from 'react'\nimport './SearchResults.css'\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component{\n    render(){\n        return(\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList tracks = {this.props.searchResults}\n                        onAdd = {this.props.onAdd}\n                        isRemoval = {false}    />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event){\n        this.props.onNameChange(event.target.value);\n    }\n\n    render(){\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue=\"New Playlist\" onChange = {this.handleNameChange} />\n                <TrackList tracks = {this.props.playlistTracks} \n                            onRemove = {this.props.onRemove} \n                            isRemoval = {true} />\n                <button className=\"Playlist-save\" onClick= {this.props.onSave}  >SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport './App.css';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n    searchResults: [],\n    playlistName: 'My Playlist',\n    playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter( currentTrack =>  currentTrack.id !== track.id  )\n    this.setState({playlistTracks: tracks});\n  }\n  updatePlaylistName(name){\n    this.setState( { playlistName: name });\n\n  }\n  savePlaylist(){\n    alert(\" this method is linked to the button correctly\");\n    const trackUris = this.state.playlistTracks.map( track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then( () => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [],\n      });\n    });\n  }\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n  render()\n  {  \n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar   onSearch={this.search} />\n          <div className=\"App-playlist\">\n\n            <SearchResults searchResults = {this.state.searchResults} \n                           onAdd = { this.addTrack}  />\n\n            <Playlist playlistName = {this.state.playlistName} \n                      playlistTracks = {this.state.playlistTracks} \n                      onRemove = { this.removeTrack}\n                      onNameChange = {this.updatePlaylistName}\n                      onSave = {this.savePlaylist } />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}