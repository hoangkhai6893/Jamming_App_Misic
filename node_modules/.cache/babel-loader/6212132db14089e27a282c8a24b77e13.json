{"ast":null,"code":"var clientId='d63b747a669441c3a8c72f24f6d73db2';var redirectUri='http://hoangkhaimusic.surge.sh';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})});}).then(function(response){return response.json();}).then(function(jsonResponse){var playListId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playListId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});}};export default Spotify;","map":{"version":3,"sources":["/home/ninja/Documents/Web/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris"],"mappings":"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","sourcesContent":["const clientId =  'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://hoangkhaimusic.surge.sh';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if (accessToken){\n            return accessToken;\n        }\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessTokenMatch && expiresInMatch ){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n            window.history.pushState('Access Token' , null , '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: { Authorization : `Bearer ${accessToken}`}\n        })\n          .then( response =>  response.json())\n          .then( jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', { headers: headers })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({ name: name })\n            });\n          })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            const playListId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: trackUris })\n              }\n            );\n          });\n      }\n    };\n    \nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}