{"ast":null,"code":"const clientId = 'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // This clears the parameters. Allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      });\n    }).then(response => response.json()).then(jsonResponse => {\n      const playListId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/ninja/Documents/Web/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris"],"mappings":"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","sourcesContent":["const clientId =  'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/'\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n  \n      // check for access token match\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n  \n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        // This clears the parameters. Allowing us to grab a new access token when it expires.\n        window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n      }\n    },\n  \n    search(term) {\n      const accessToken = Spotify.getAccessToken();\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        });\n    },\n  \n    savePlaylist(name, trackUris) {\n      if (!name || !trackUris.length) {\n        return;\n      }\n      const accessToken = Spotify.getAccessToken();\n      const headers = { Authorization: `Bearer ${accessToken}` };\n      let userId;\n  \n      return fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          userId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({ name: name })\n          });\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          const playListId = jsonResponse.id;\n          return fetch(\n            `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\n            {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({ uris: trackUris })\n            }\n          );\n        });\n    }\n  };\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}