{"ast":null,"code":"const cliendID = 'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMath = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMath = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMath && expiresInMath) {\n      accessToken = accessTokenMath[1];\n      const expiresIn = Number(expiresInMath[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => jsonResponse => {\n      userID = jsonResponse.id;\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/ninja/Documents/Web/jamming/src/util/Spotify.js"],"names":["cliendID","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMath","window","location","href","match","expiresInMath","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlaylist","trackUris","length","userID"],"mappings":"AAAA,MAAMA,QAAQ,GAAI,kCAAlB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAE;AACZ,QAAGF,WAAH,EAAe;AACX,aAAOA,WAAP;AACH;;AACD,UAAMG,eAAe,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAxB;AACA,UAAMC,aAAa,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAtB;;AACA,QAAGJ,eAAe,IAAIK,aAAtB,EAAqC;AACjCR,MAAAA,WAAW,GAAGG,eAAe,CAAC,CAAD,CAA7B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,aAAa,CAAC,CAAD,CAAd,CAAxB;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAA0C,IAA1C,EAAiD,GAAjD;AACA,aAAOb,WAAP;AACH,KAND,MAOI;AACA,YAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACH;AACJ,GAlBW;;AAmBZC,EAAAA,MAAM,CAACC,IAAD,EAAM;AACR,UAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EACZ;AACIE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAI,UAASnB,WAAY;AAAxC;AADb,KADY,CAAL,CAGJoB,IAHI,CAGEC,QAAQ,IAAI;AACjB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KALM,EAMLF,IANK,CAMCG,YAAY,IAAI;AACpB,UAAG,CAACA,YAAY,CAACC,MAAjB,EAAwB;AACpB,eAAO,EAAP;AACH;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA+BC,KAAK,KAAK;AAC5CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADkC;AAE5CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAFgC;AAG5CC,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgBD,IAHoB;AAI5CE,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYF,IAJyB;AAK5CG,QAAAA,GAAG,EAAEL,KAAK,CAACK;AALiC,OAAL,CAApC,CAAP;AAOH,KAjBM,CAAP;AAkBH,GAvCW;;AAwCZC,EAAAA,YAAY,CAACJ,IAAD,EAAOK,SAAP,EAAiB;AACzB,QAAG,CAACL,IAAD,IAAS,CAACK,SAAS,CAACC,MAAvB,EAA8B;AAC1B;AACH;;AACD,UAAMnC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMgB,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAG,UAASnB,WAAY;AAAvC,KAAhB;AACA,QAAIoC,MAAJ;AACA,WAAOnB,KAAK,CAAC,+BAAD,EAAkC;AAACC,MAAAA,OAAO,EAAEA;AAAV,KAAlC,CAAL,CACLE,IADK,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAELF,IAFK,CAECG,YAAY,IAAIA,YAAY,IAAI;AACpCa,MAAAA,MAAM,GAAGb,YAAY,CAACK,EAAtB;AACH,KAJM,CAAP;AASH;;AAxDW,CAAhB;AA+DA,eAAe3B,OAAf","sourcesContent":["const cliendID =  'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/'\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if(accessToken){\n            return accessToken;\n        }\n        const accessTokenMath = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMath = window.location.href.match(/expires_in=([^&]*)/);\n        if(accessTokenMath && expiresInMath ){\n            accessToken = accessTokenMath[1];\n            const expiresIn = Number(expiresInMath[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token' , null , '/');\n            return accessToken;\n        }\n        else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}` , \n        {\n            headers: { Authorization : `Bearer ${accessToken}`}\n        }).then( response => {\n            return response.json();\n        }\n        ).then( jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map( track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artist[0].name,\n                album: track.album.name,\n                uri: track.uri,\n            }))\n        })\n    },\n    savePlaylist(name, trackUris){\n        if(!name || !trackUris.length){\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userID;\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then( response => response.json()\n        ).then( jsonResponse => jsonResponse => {\n            userID = jsonResponse.id;\n        })\n\n\n\n\n    }\n\n}\n\n\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}