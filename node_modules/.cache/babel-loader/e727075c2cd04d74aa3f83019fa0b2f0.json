{"ast":null,"code":"const clientId = 'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMath = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMath = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMath && expiresInMath) {\n      accessToken = accessTokenMath[1];\n      const expiresIn = Number(expiresInMath[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      });\n    }).then(response => response.json()).then(jsonResponse => {\n      const playListId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/ninja/Documents/Web/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMath","window","location","href","match","expiresInMath","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris"],"mappings":"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","sourcesContent":["const clientId =  'd63b747a669441c3a8c72f24f6d73db2';\nconst redirectUri = 'http://localhost:3000/'\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if (accessToken){\n            return accessToken;\n        }\n        const accessTokenMath = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMath = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessTokenMath && expiresInMath ){\n            accessToken = accessTokenMath[1];\n            const expiresIn = Number(expiresInMath[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token' , null , '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {\n            headers: { Authorization : `Bearer ${accessToken}`}\n        }).then( response =>  response.json()\n         ).then( jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artist[0].name,\n                album: track.album.name,\n                uri: track.uri,\n            }));\n        });\n    },\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', { headers: headers })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({ name: name })\n            });\n          })\n          .then(response => response.json())\n          .then(jsonResponse => {\n            const playListId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: trackUris })\n              }\n            );\n          });\n      }\n    };\n    \nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}